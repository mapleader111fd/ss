if shConfig.openMethod == 'command' then    RegisterCommand('tablet', function()        openTablet()    end)endlocal function getInitialData()    local playerIdentifier = lib.callback.await('rahe-tablet:server:getPlayerIdentifier', false)    local background = GetResourceKvpString(('background-%s'):format(playerIdentifier)) or nil    local _, translations = pcall(function() return getTranslations() end)    return {        translations = translations,        defaultBackgrounds = shConfig.defaultBackgrounds,        background = background,        isPreset = (not background) or (background and isPresetBackground(background)),        customBackgroundData = {            enabled = shConfig.allowCustomBackgrounds,            recommendedUploadWebsite = shConfig.recommendedUploadWebsite,            allowedImageHosts = shConfig.allowedImageHosts        }    }endlocal settings = {}local function loadSettings(loadFromCache)    if loadFromCache then        local playerIdentifier = lib.callback.await('rahe-tablet:server:getPlayerIdentifier', false)        local savedSettings = GetResourceKvpString(('settings-%s'):format(playerIdentifier))        settings = savedSettings and json.decode(savedSettings) or config.defaultSettings    end    SendNUIMessage({ action = 'loadSettings', value = settings })endlocal savedAppInstallTargetlocal function getAvailableApps(slotData)    local installedApps = {}    if not savedAppInstallTarget then        savedAppInstallTarget = lib.callback.await('rahe-tablet:server:getAppInstallTarget', false)    end    if savedAppInstallTarget == 'player' then        installedApps = lib.callback.await('rahe-tablet:server:getPlayerInstalledApps', false)    else        installedApps = slotData and slotData.metadata.installedApps or {}    end    if not applicationsLoadable then        return {}    end    local installedAppMap = {}    for _, applicationName in ipairs(installedApps) do        installedAppMap[applicationName] = true    end    local apps = {}    for _, application in ipairs(config.applications) do        if not shConfig.installEnabled or not application.requireInstall or installedAppMap[application.id] then            table.insert(apps, application)        end    end    return appsendlocal function getLiveData(itemSlot)    local apps = getAvailableApps(itemSlot)    local year, month, day, hour, minute, _ = GetLocalTime()    return {        time = config.timeFormat:format(hour, minute),        date = config.dateFormat:format(day, month, year),        applications = apps    }endlocal holdingTablet, tabletObjectlocal function playAnimation()    lib.requestAnimDict('amb@code_human_in_bus_passenger_idles@female@tablet@base')    holdingTablet = true    if tabletObject and DoesEntityExist(tabletObject) then        DeleteEntity(tabletObject)    end    local playerPed = cache.ped    CreateThread(function()        while holdingTablet do            if not IsEntityPlayingAnim(playerPed, 'amb@code_human_in_bus_passenger_idles@female@tablet@base', 'base', 3) then                TaskPlayAnim(playerPed, 'amb@code_human_in_bus_passenger_idles@female@tablet@base', 'base', 3.0, 3.0, -1, 49, 0, 0, 0, 0)            end            Wait(0)        end    end)    CreateThread(function()        lib.requestModel('prop_cs_tablet')        tabletObject = CreateObject(joaat('prop_cs_tablet'), 1.0, 1.0, 1.0, 1, 1, 0)        local bone = GetPedBoneIndex(cache.ped, 60309)        AttachEntityToEntity(tabletObject, cache.ped, bone, 0.03, 0.02, -0.0, 10.0, -10.0, 0.0, 1, 0, 0, 0, 2, 1)    end)endlocal function stopAnimation()    if not holdingTablet then        return    end    holdingTablet = false    Wait(250)    ClearPedTasks(cache.ped)    if DoesEntityExist(tabletObject) then        DeleteObject(tabletObject)    end    tabletObject = nilendlocal hasTabletBeenOpened = falsefunction openTablet(slotData)    if not hasTabletBeenOpened then        SendNUIMessage({            action = 'loadInitialData',            data = getInitialData()        })        loadSettings(true)        hasTabletBeenOpened = true    end    SendNUIMessage({        action = 'loadLiveData',        data = getLiveData(slotData)    })    SendNUIMessage({ action = 'toggleMenu', value = true })    if not lib.callback.await('rahe-tablet:server:allValid', false) then return end    SetNuiFocus(true, true)    if config.playAnimation then        playAnimation()    end    TriggerEvent('rahe-tablet:client:tabletOpened')endlocal function validateOpenData(openData)    assert(openData, 'Application clicked, but no opening logic defined in the config.')    assert(openData.type == 'event' or openData.type == 'export', 'Application clicked, but no event or export available for action.')    if openData.type == 'export' then        assert(openData.resource, 'Resource name is missing for the export configured.')    endendlocal function getApplicationByName(name)    for _, application in ipairs(config.applications) do        if application.id == name then            return application        end    endendlocal function openApplication(name)    local application = getApplicationByName(name)    local openData = application.open    validateOpenData(openData)    if openData.type == 'event' then        TriggerEvent(openData.value, openData.data)    else        exports[openData.resource][openData.value](openData.data)    endendRegisterNUICallback('applicationClicked', function(data, cb)    openApplication(data)    cb('ok')end)RegisterNUICallback('saveBackgroundImage', function(data, cb)    local isValid = lib.callback.await('rahe-tablet:server:isValidBackgroundUrl', false, data.type, data.image)    if not isValid then        return    end    local playerIdentifier = lib.callback.await('rahe-tablet:server:getPlayerIdentifier', false)    SetResourceKvp(('background-%s'):format(playerIdentifier), data.image)    SendNUIMessage({ action = 'setBackground', isPreset = data.type == 'preset', value = data.image })    cb('ok')end)RegisterNUICallback('closeTablet', function(_, cb)    if not canClose then        return    end    SendNUIMessage({ action = 'toggleMenu', value = false })    SetNuiFocus(false, false)    if config.playAnimation then        stopAnimation()    end    cb('ok')end)RegisterNUICallback('toggleSetting', function(id, cb)    local settingIndex    for index, setting in ipairs(settings) do        if setting.id == id then            settingIndex = index            break        end    end    if not settingIndex then        return    end    settings[settingIndex].value = not settings[settingIndex].value    loadSettings(false)    local playerIdentifier = lib.callback.await('rahe-tablet:server:getPlayerIdentifier', false)    SetResourceKvp(('settings-%s'):format(playerIdentifier), json.encode(settings))    cb('ok')end)function isPresetBackground(image)    for _, v in ipairs(shConfig.defaultBackgrounds) do        if v == image then            return true        end    end    return falseendlib.callback.register('rahe-tablet:client:startAppInstall', function()    return lib.progressCircle({        duration = config.appInstallTimer,        label = locale('installing_application'),        position = 'bottom',        useWhileDead = false,        canCancel = true,    })end)